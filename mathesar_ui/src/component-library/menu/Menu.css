.menu {
  --spacing-x-default: 0.5em;
  --spacing-y-default: 0.5em;
  display: -ms-inline-grid;
  display: inline-grid;
  min-width: var(--min-width, 0);
  -ms-grid-columns: [spacer-left] var(--spacing-x, var(--spacing-x-default))
    [control] auto [icon] auto [label] 1fr [spacer-right]
    var(--spacing-x, var(--spacing-x-default));
  grid-template-columns:
    [spacer-left] var(--spacing-x, var(--spacing-x-default))
    [control] auto [icon] auto [label] 1fr [spacer-right] var(
      --spacing-x,
      var(--spacing-x-default)
    );
  /**
   * Tricky aspects of this CSS:
   *
   * We want to vertically align all the controls, icons, and labels, even if
   * the Menu doesn't consistently have a control or icon for all its MenuItems.
   * We're leveraging the power of CSS grid to horizontally position the
   * controls, icons, and labels so that they are in vertical alignment across
   * the entire Menu.
   *
   * This component would be an ideal use-case for sub-grid, but sub-grid is not
   * widely supported enough yet. So instead we're faking it by setting
   * `display: contents;` on `.menu-item`. We also want a row hover background,
   * but because of `display: contents;`, we need to set the hover background,
   * per cell instead of per row. Because the hover background is per-cell, we
   * can't use `gap` (or there would be gaps in the background). Foregoing `gap`
   * makes it harder to get consistent spacing between and around cells, which
   * is why we have the funky `padding` stuff and extra grid columns. I don't
   * like the extra grid columns. There may be a cleaner way to do this, but I
   * wasn't able to think of one quickly.
   */
}

.menu .menu-heading {
  grid-column: 1 / -1;
  color: var(--slate-500);
  padding: 0.2em 0.5em;
}

.menu .menu-divider {
  grid-column: 1 / -1;
  border-top: 0.1em solid var(--slate-200);
  height: 0;
}

.menu .menu-item {
  display: contents;
  cursor: pointer;
  color: var(--slate-800);
}

.menu .menu-item.menu-item-link {
  text-decoration: none;
}

.menu .menu-item.danger {
  color: var(--red-500);
}

.menu .menu-item:not(.disabled):hover .cell {
  background-color: var(--slate-100);
}

.menu .menu-item.disabled {
  color: var(--slate-300);
  cursor: not-allowed;
}

.menu .menu-item > .control {
  grid-column: control;
}

.menu .menu-item > .icon {
  grid-column: icon;
}

.menu .menu-item > .label {
  grid-column: label;
}

.menu .menu-item > .cell:not(:empty) {
  padding: var(--spacing-y, var(--spacing-y-default))
    var(--spacing-x, var(--spacing-x-default));
}

.menu .menu-item > .control,
.menu .menu-item > .icon {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.menu .menu-item > .cell.control {
  --checkbox-margin-bottom: 0;
}

.menu .menu-item > .passthrough-button {
  background: inherit;
  border-radius: inherit;
  border: inherit;
  color: inherit;
  cursor: inherit;
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
  text-align: inherit;
  margin: 0;
}
/*# sourceMappingURL=Menu.css.map */
